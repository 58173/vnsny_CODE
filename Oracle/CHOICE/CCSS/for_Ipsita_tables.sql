
---Agent Login
SELECT ACD.AGENT_GROUP,AGT.AGENT_ID,ACD.AGENT_FIRST_NAME, ACD.AGENT_LAST_NAME,ACD.DATE1,ACD.YEAR1,ACD.MONTH1,ACD.DAY_OF_MONTH,ACD.DAY_OF_WEEK,ACD.TIME1,
        AGT.STATE, AGT.REASON_CODE, AGT.SKILL_AVAILABILITY, AGT.AGENT_STATE_TIME
FROM DW_OWNER.F9_ACD_QUEUE ACD
LEFT JOIN DW_OWNER.F9_AGENT AGT  ON ACD.CALL_ID= AGT.CALL_ID
WHERE ACD.AGENT_GROUP IS NOT NULL ; 



---Agent Disposition Details
select distinct
L.AGENT_GROUP,
L.AGENT_ID,
L.AGENT_LAST_NAME,
L.AGENT_FIRST_NAME,
A.AGENT_START_DATE,
L.DATE1,
L.YEAR1,
L.MONTH1,
L.DAY_OF_MONTH,
L.DAY_OF_WEEK,
L.HALF_HOUR,
L.CALLS,
L.DISPOSITION,
L.CALL_TYPE,
L.SKILL,
L.AFTER_CALL_WORK_TIME,
L.HANDLE_TIME,
L.TALK_TIME,
L.HOLD_TIME,
L.ANI,
L.DNIS,
L.TIMESTAMP1,
A.AGENT_DISCONNECTS_FIRST,
A.TRANSFERRED_TO_SKILL
from DW_OWNER.F9_CALL_LOG L
LEFT JOIN DW_OWNER.F9_AGENT A ON A.CALL_ID = L.CALL_ID AND A.AGENT_ID = L.AGENT_ID
;



---Agent State Details
select 
AGENT_GROUP
AGENT_ID,
AGENT_FIRST_NAME,
AGENT_LAST_NAME,
DATE1,
YEAR1,
MONTH1,
DAY_OF_MONTH,
DAY_OF_WEEK,
HALF_HOUR,
QUARTER_HOUR,
TIME1,
STATE,
REASON_CODE,
AGENT_STATE_TIME,
TIMESTAMP1,
LOGIN_TIMESTAMP,
ON_ACW_TIME,
READY_TIME,
CALL_ID
from DW_OWNER.F9_AGENT;





--- CALL LOG
SELECT 
CALL_ID,
TIMESTAMP1,
CAMPAIGN,
CALL_TYPE,
DISPOSITION,
ANI,
CUSTOMER_NAME,
DNIS,
CALL_TIME,
IVR_TIME,
QUEUE_WAIT_TIME,
HANDLE_TIME,
TALK_TIME_LESS_HOLD_AND_PARK,
TALK_TIME,
HOLD_TIME,
AFTER_CALL_WORK_TIME,
TRANSFERS,
CONFERENCES,
HOLDS,
ABANDONED,
RECORDINGS,
AGENT_ID,
AGENT_GROUP,
AGENT_LAST_NAME,
AGENT_FIRST_NAME,
TIME_TO_ABANDON,
SKILL,
CALLS,
SPEED_OF_ANSWER,
SERVICE_LEVEL,
DATE1,
YEAR1,
DAY_OF_MONTH,
DAY_OF_WEEK,
MONTH1,
HALF_HOUR,
QUARTER_HOUR
FROM DW_OWNER.F9_CALL_LOG
;






---
SELECT 
AGENT_ID,
AGENT_GROUP,
AGENT_LAST_NAME,
AGENT_FIRST_NAME,
numtodsinterval(sum(SUBSTR(HANDLE_TIME, 1, 2)*3600 + SUBSTR(HANDLE_TIME, 4, 2)*60 + SUBSTR(HANDLE_TIME, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(TALK_TIME_LESS_HOLD_AND_PARK, 1, 2)*3600 + SUBSTR(TALK_TIME_LESS_HOLD_AND_PARK, 4, 2)*60 + SUBSTR(TALK_TIME_LESS_HOLD_AND_PARK, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(SPEED_OF_ANSWER, 1, 2)*3600 + SUBSTR(SPEED_OF_ANSWER, 4, 2)*60 + SUBSTR(SPEED_OF_ANSWER, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(IVR_TIME, 1, 2)*3600 + SUBSTR(IVR_TIME, 4, 2)*60 + SUBSTR(IVR_TIME, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(QUEUE_WAIT_TIME, 1, 2)*3600 + SUBSTR(QUEUE_WAIT_TIME, 4, 2)*60 + SUBSTR(QUEUE_WAIT_TIME, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(TALK_TIME, 1, 2)*3600 + SUBSTR(TALK_TIME, 4, 2)*60 + SUBSTR(TALK_TIME, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(HOLD_TIME, 1, 2)*3600 + SUBSTR(HOLD_TIME, 4, 2)*60 + SUBSTR(HOLD_TIME, 7, 2)), 'SECOND'),
numtodsinterval(sum(SUBSTR(AFTER_CALL_WORK_TIME, 1, 2)*3600 + SUBSTR(AFTER_CALL_WORK_TIME, 4, 2)*60 + SUBSTR(AFTER_CALL_WORK_TIME, 7, 2)), 'SECOND'),
COUNT(COALESCE(TRANSFERS,0)),
COUNT(COALESCE(to_number(CONFERENCES),0)),
COUNT(COALESCE(HOLDS,0)),
COUNT(COALESCE(to_number(ABANDONED),0))
FROM DW_OWNER.F9_CALL_LOG
WHERE AGENT_ID IS NOT NULL 
AND DATE1 = to_date('12/8/2020', 'mm/dd/yyyy')
GROUP BY AGENT_ID,
AGENT_GROUP,
AGENT_LAST_NAME,
AGENT_FIRST_NAME
;